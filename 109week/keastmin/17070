#include <iostream>
using namespace std;

struct Pos {
	int x, y;
};

int N;
int map[17][17];
int dp[17][17];
int res = 0;

// [0][...]: 가로, [1][...]: 세로, [2][...]: 대각선(dfs 함수에서 세로로 이동하는 경우 추가)
int dx[3][2] = { {1, 1}, {0, 1},  {1, 1} };
int dy[3][2] = { {0, 1}, {1, 1},  {0, 1} };

int retState(Pos p1, Pos p2) {
	if (p1.y == p2.y) return 0; // 가로
	if (p1.x == p2.x) return 1; // 세로
	return 2;					// 대각선
}

bool check(int x, int y) {
	if (x <= 0 || x > N || y <= 0 || y > N) return false; // 범위를 벗어나는가?
	if (map[y][x] == 1) return false; // 벽으로 막혀있는가?
	return true;
}

void dfs(Pos p1, Pos p2) {
	// 현재 상태 받기
	int state = retState(p1, p2);

	// 대각선 상태일 때, 추가적인 주변 체크
	if (state == 2 && (!check(p2.x - 1, p2.y) || !check(p2.x, p2.y - 1)))
		return;

	// 도착한 경우
	if (p2.x == N && p2.y == N) {
		res++;
		return;
	}

	// 우선 가로와 세로로 이동하는 경우를 계산하여 dfs
	// 현재 상태가 대각선일 경우 가로의 경우와 동일하게 dfs
	for (int i = 0; i < 2; i++) {
		int nx = p2.x + dx[state][i];
		int ny = p2.y + dy[state][i];

		if (check(nx, ny)) {
			dfs(p2, { nx, ny });
		}
	}

	// 현재 상태가 대각선이라면 추가적으로 세로로 이동하는 경우 계산
	if (state == 2) {
		int nx = p2.x + 0;
		int ny = p2.y + 1;

		if (check(nx, ny)) {
			dfs(p2, { nx, ny });
		}
	}
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);

	cin >> N;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
		}
	}

	// start x, y
	Pos p1 = { 1, 1 };
	Pos p2 = { 2, 1 };
	dfs(p1, p2);
	cout << res << '\n';

	return 0;
}
