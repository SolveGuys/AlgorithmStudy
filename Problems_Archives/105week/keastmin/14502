/**********************************************************
2024-02-13
https://github.com/keastmin
백준/14502/연구소
난이도: 골드4
유형: BFS, 브루트포스
**********************************************************/

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// 왼쪽, 위, 오른쪽, 아래
int dx[4] = { -1, 0, 1, 0 };
int dy[4] = { 0, -1, 0, 1 };

// 현재 x, y가 범위를 넘지 않는지 검사
bool check(int x, int y, int N, int M) {
	if (x < 0 || x >= M || y < 0 || y >= N) return false;

	return true;
}

// BFS를 수행하며 안전 영역을 검사
int bfs(vector<vector<int>>& t, int N, int M, vector<vector<int>>& virus) {
	// x, y값, 즉 위치를 저장하므로 pair 사용, BFS를 위한 queue 생성
	queue<pair<int, int>> q;

	// 연구소에 위치하고 있는 모든 바이러스를 queue에 삽입
	for (const auto v : virus) {
		q.push({ v[0], v[1] });
	}

	// 벽으로 가로막혀 있지 않은 0인 칸에 한하여 감염되었다는 표시로 2로 변경, BFS 진행
	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (check(nx, ny, N, M)) {
				if (t[ny][nx] == 0) {
					t[ny][nx] = 2;
					q.push({ nx, ny });
				}
			}
		}
	}

	// BFS이후 아직 0인 칸의 개수를 세어 안전 영역의 수 확인
	int count = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (t[i][j] == 0) {
				count++;
			}
		}
	}

	return count;
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);

	int N, M;
	cin >> N >> M;

	vector<vector<int>> map(N, vector<int>(M)); // 연구소
	vector<vector<int>> virus;					// 바이러스 위치
	
	// 안전 영역의 최대 크기
	int max = 0;

	// 연구소의 상태를 입력받으며 바이러스가 존재하는 위치를 따로 저장해둠
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];

			if (map[i][j] == 2) {
				virus.push_back({ j, i });
			}
		}
	}

/*******************************************************************************************
1. 벽을 3개 세울 수 있으므로 map이 변경되지 않도록 새로운 t에 map을 넘겨주고 만약 해당 위치가 비어있지 않다면 다음 위치에 1을 배치.
2. 비어있는 위치 3개를 선정하여 1로 변경해주고 bfs를 진행하며 바이러스 확산 후 안전 영역을 리턴받음.
3. 현재 리턴받은 안전 영역 수가 최대값인지 검사하고 다음 반복에서 map을 사용할 수 있도록 t를 초기화.
*******************************************************************************************/
	for (int i = 0; i < N * M - 2; ++i) {
		vector<vector<int>> t = map;
		if (t[i / M][i % M] != 0)
			continue;
		for (int j = i + 1; j < N * M - 1; ++j) {
			if (t[j / M][j % M] != 0)
				continue;
			for (int k = j + 1; k < N * M; ++k) {
				if (t[k / M][k % M] != 0)
					continue;

				t[i / M][i % M] = 1;
				t[j / M][j % M] = 1;
				t[k / M][k % M] = 1;

				int calc = bfs(t, N, M, virus);
				if (max < calc) max = calc;

				t = map;
			}
		}
	}

	cout << max << '\n';

	return 0;
}
